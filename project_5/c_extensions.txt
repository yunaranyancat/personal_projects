Preamble
- This tutorial is about extending Python with C, Having at least a basic understanding of C will be very helpful.
- Compiling this on Windows is done with a different process.

What are C extensions?
- Python talking with the C programming language
- Creation of wrappers which bind python objects to C functions.
- There is many sub-topics of C Extensions.

What are they for?
- Because of Python's high level abstractions , some things can't be done without a lower level implementation first.
- Perhaps you already have a library of C functions that you want to turn into a python module to use.

Python Header
- Everything in the Python header starts with the prefix Py or PY.
- The PyObject type is always used as a pointer and handles all the data parsing between Python and C.
- Eg. static PyObject* myFunc(PyObject* self)

Python.h functions
- PyArg_ParseTuple(args, format, ...)
 Handles getting the arguments from Python.
- Py_BuildValue(format, ...)
 Handles turning values into PyObject pointers.
- PyModule_Create(moduleDef)
 Initializes the module and wraps the method pointers using the module definitions.
- If you want your function to return nothing, return the Py_None value.

PyMethodDef
- The PyMethodDef structure is one of the most critical parts because the compiler won't pick up any errors inside.
- The structure must always end with terminating NULL and 0 values. {NULL, NULL, 0, NULL}
- Here we tell Python if the function has argument, no arguments or arguments and keywords.

MethodDef example

- static PyMethodDef myMethods[] = {
    {"func1", func1, METH_NOARGS, "func1 doc"},
    {"func2", func2, METH_VARARGS, 'func2 doc'},
    {NULL, NULL, 0, NULL}
};

- Pattern : pyMethodName, function, functioType, Docs

PyModuleDef
- The PyModuleDef structure is what we use to tell the PyModule_Create() function what information to use to create the module.
- We need to give it a name, documentation , tell python of we will control the module state and the structure of methods to include in the module.

ex :
- static struct PyModuleDef myModule = {
    PyModuleDef_HEAD_INIT,
    "myModule", #name of module
    "Fibonacci Module", #Module Docs
    -1, #-1 the module state is global
    myMethods #method def structure
};

Our C Program

- sudo apt-get install python-dev
- Let's create a simple Fibonacci function in C and create the bindings for a module.
- We will also add a version function so we can see a function that doesn't take arguments.
- Let's call it myModule.c

The Setup Script

- Now that we have written our c program and created the python binding ready to compile.
- There is a nicely made utility modules that comes with python to make the building and linking easy.
- Lets' call out setup script setup.py
- -cmingw32 (for windows)

Using it
- Now that we have built our extension it will be output into a build directory
- We need to copy the module.so file into the directory of our python code.
( Or to the python libs folder), then we can import it.
- Let's create a testEx.py program.

Notes
- SWIG makes this process easier, rather than having to write bindings, SWIG will generate them for you.
- If you were able to get this example working, using some more of the advanced features of the python header should be easier to understand and implement.
